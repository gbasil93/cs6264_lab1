import angr

def check_mem_corruption(simgr):
    if len(simgr.unconstrained):
        for path in simgr.unconstrained:
            if path.satisfiable(extra_constraints=[path.regs.pc == b"CCCC"]):
                path.add_constraints(path.regs.pc == b"CCCC")
                if path.satisfiable():
                    simgr.stashes['mem_corrupt'].append(path)
                simgr.stashes['unconstrained'].remove(path)
                simgr.drop(stash='active')
    return simgr

def task1():
    project = angr.Project('./task1/task1')
    sm = project.factory.simulation_manager(save_unconstrained=True)
    sm.stashes['mem_corrupt'] = []
    sm.explore(step_func=check_mem_corruption)

    # while len(sm.unconstrained) == 0:
    #     sm.step()
    # unconstrained = sm.unconstrained[0]
    # crashing_input = unconstrained.posix.dumps(0)

    # found = False
    # i = 0
    # updated_crash = bytearray()
    # for index, value in enumerate(crashing_input):
    #     if value != 0:
    #         updated_crash += bytes(b'\xCA\xFE\xBA\xBE')
    #         break
    #     else:
    #         updated_crash.append(value)


    # with open('crash_input.bin', 'wb') as f:
    #     f.write(updated_crash)

    # print("Found buffer overflow!")
    # print(repr(updated_crash))

if __name__ == "__main__":
    task1()